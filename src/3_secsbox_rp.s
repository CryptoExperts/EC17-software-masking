.text



///////////////////////////////////////////////////////////////////////////////
//                                                                           //
//                      RP polynomial AES evaluation                         //
//                                                                           //
///////////////////////////////////////////////////////////////////////////////


.pool
rp_sbox:	
    push {R2-R12, LR}
    // init phase
    LDR     R7,  =multTable
    LDR     R10, =cprrTable
    LDR     R11, =tmpTable
    

    ///////////////////////////////////
    //                               //
    //    Normal sbox evaluation     //
    //                               //
    ///////////////////////////////////



#if CODE_MODE==NORMAL

    // ------------------------------------------------------------------------
    // x -> x^254 

    // z = x^2
    MOV     R12, #0
loop0SQRnormal:	
    LDRB    R2, [R0, R12, LSL #2]
    MOV     R3, R2
    multiplication R2,R3,R4,R7,R5,0
    STRB    R4, [R11, R12, LSL #2]
    // loop 0 processing
    ADD     R12, #1
    CMP     R12, #NBSHARES
    BNE     loop0SQRnormal
    // y = x^5
    BL      cprr_eval
    // y = y^5 = x^25
    MOV     R2, R0
    MOV     R0, R1
    MOV     R1, R2
    BL      cprr_eval
    // y = y^5 = x^125
    MOV     R2, R0
    MOV     R0, R1
    MOV     R1, R2
    BL      cprr_eval
    // y = y*z = x^127
    MOV     R2, R0
    MOV     R0, R11 
    BL      isw_mult
    // y = y^2 = x^254
    MOV     R12, #0
loop1SQRnormal:	
    LDRB    R0, [R2, R12, LSL #2]
    MOV     R3, R0
    multiplication R0,R3,R4,R7,R5,0
    STRB    R4, [R1, R12, LSL #2]
    // loop 1 processing
    ADD     R12, #1
    CMP     R12, #NBSHARES
    BNE     loop1SQRnormal

    // ------------------------------------------------------------------------
    // Aff(x^254)

    // Aff(x_0^254 + (0x63*(1&NBSHARES)))
    LDR     R10, =AffFunTable
    LDRB    R5, [R1]
    LDRB    R5, [R10, R5]
    MOV     R6, #1
    BIC     R6, R6, #NBSHARES
    MOV     R7, #0x63
    MUL     R4, R6, R7
    EOR     R5, R4
    STRB    R5, [R1]
    // Aff(x_i^254)
    MOV     R12, #1
loopAffnormal:	
    LDRB    R5, [R1, R12, LSL #2]
    LDRB    R5, [R10, R5]
    STRB    R5, [R1, R12, LSL #2]
    // loop Aff processing
    ADD     R12, #1
    CMP     R12, #NBSHARES
    BNE     loopAffnormal


    ///////////////////////////////////
    //                               //
    //      4 // sbox evaluation     //
    //                               //
    ///////////////////////////////////


#elif CODE_MODE==PARA4

    // ------------------------------------------------------------------------
    // x -> x^254 

    // z = x^2
    MOV     R12, #0
loop0SQRpara4:	
    LDR     R2, [R0, R12, LSL #2]
    AND     R8, R2, #((1<<8)-1)
    MOV     R9, R8
    multiplication R8,R9,R3,R7,R5,0
    AND     R8, R2, #(((1<<8)-1)<<8)
    MOV     R9, R8
    multiplication R8,R9,R4,R7,R5,1
    EOR     R3, R3, R4, LSL #8
    AND     R8, R2, #(((1<<8)-1)<<(2*8))
    MOV     R9, R8
    multiplication R8,R9,R4,R7,R5,2
    EOR     R3, R3, R4, LSL #(2*8)
    LSR     R8, R2, #(3*8)
    LSR     R9, R2, #(3*8)
    multiplication R8,R9,R4,R7,R5,3
    EOR     R3, R3, R4, LSL #(3*8)
    STR     R3, [R11, R12, LSL #2]
    // loop 0 processing
    ADD     R12, #1
    CMP     R12, #NBSHARES
    BNE     loop0SQRpara4
    // y = x^5
    BL      cprr_eval
    // y = y^5 = x^25
    MOV     R2, R0
    MOV     R0, R1
    MOV     R1, R2
    BL      cprr_eval
    // y = y^5 = x^125
    MOV     R2, R0
    MOV     R0, R1
    MOV     R1, R2
    BL      cprr_eval
    // y = y*z = x^127
    MOV     R2, R0
    MOV     R0, R11
    BL      isw_mult
    // y = y^2 = x^254
    MOV     R12, #0
loop1SQRpara4:	
    LDR     R0, [R2, R12, LSL #2]
    AND     R8, R0, #((1<<8)-1)
    MOV     R9, R8
    multiplication R8,R9,R3,R7,R5,0
    AND     R8, R0, #(((1<<8)-1)<<8)
    MOV     R9, R8
    multiplication R8,R9,R4,R7,R5,1
    EOR     R3, R3, R4, LSL #8
    AND     R8, R0, #(((1<<8)-1)<<(2*8))
    MOV     R9, R8
    multiplication R8,R9,R4,R7,R5,2
    EOR     R3, R3, R4, LSL #(2*8)
    LSR     R8, R0, #(3*8)
    LSR     R9, R0, #(3*8)
    multiplication R8,R9,R4,R7,R5,3
    EOR     R3, R3, R4, LSL #(3*8)
    STR     R3, [R1, R12, LSL #2]
    // loop 1 processing
    ADD     R12, #1
    CMP     R12, #NBSHARES
    BNE     loop1SQRpara4

    // ------------------------------------------------------------------------
    // Aff(x^254)

    // Aff(x_0^254 + (0x63*(1&NBSHARES)))
    LDR     R10, =AffFunTable
    LDR     R5, [R1]
    AND     R8, R5, #((1<<8)-1) 
    LDRB    R3, [R10, R8]
    AND     R8, R5, #(((1<<8)-1)<<8)
    LDRB    R9, [R10, R8, LSR #8]
    EOR     R3, R3, R9, LSL #8
    AND     R8, R5, #(((1<<8)-1)<<(2*8))
    LDRB    R9, [R10, R8, LSR #(2*8)]
    EOR     R3, R3, R9, LSL #(2*8)
    LSR     R8, R5, #(3*8)
    LDRB    R9, [R10, R8]
    EOR     R3, R3, R9, LSL #(3*8)
    MOV     R6, #1
    BIC     R6, R6, #NBSHARES
    MOV     R7, #0x63
    EOR     R7, R7, R7, LSL #8
    EOR     R7, R7, R7, LSL #(2*8)
    MUL     R4, R6, R7
    EOR     R3, R4
    STR     R3, [R1]
    // Aff(x_i^254)
    MOV     R12, #1
loopAffpara4:	
    LDR     R5, [R1, R12, LSL #2]
    AND     R8, R5, #((1<<8)-1) 
    LDRB    R3, [R10, R8]
    AND     R8, R5, #(((1<<8)-1)<<8)
    LDRB    R9, [R10, R8, LSR #8]
    EOR     R3, R3, R9, LSL #8
    AND     R8, R5, #(((1<<8)-1)<<(2*8))
    LDRB    R9, [R10, R8, LSR #(2*8)]
    EOR     R3, R3, R9, LSL #(2*8)
    LSR     R8, R5, #(3*8)
    LDRB    R9, [R10, R8]
    EOR     R3, R3, R9, LSL #(3*8)
    STR     R3, [R1, R12, LSL #2]
    // loop Aff processing
    ADD     R12, #1
    CMP     R12, #NBSHARES
    BNE     loopAffpara4
#endif
    pop {R2-R12, LR}
    BX  LR



///////////////////////////////////////////////////////////////////////////////
//                                                                           //
//                  Temporary tables for RP evaluation                       //
//                                                                           //
///////////////////////////////////////////////////////////////////////////////

    
.data
tmpTable:
	.zero (NBSHARES*4*4)
    

///////////////////////////////////////////////////////////////////////////////
//                                                                           //
//                            RP look-up tables                              //
//                                                                           //
///////////////////////////////////////////////////////////////////////////////


.data 
cprrTable:	
    .byte 0x00,0x01,0x20,0x33,0x6C,0x72,0x3A,0x36,0x2F,0x8D,0xC2,0x72,0x01,0xBC,0x9A,0x35
    .byte 0x97,0xD8,0x10,0x4D,0x33,0x63,0xC2,0x80,0x20,0xCC,0x6A,0x94,0xC6,0x35,0xFA,0x1B
    .byte 0x7D,0xCB,0x5E,0xFA,0x36,0x9F,0x63,0xD8,0x3A,0x2F,0xD4,0xD3,0x33,0x39,0xAB,0xB3
    .byte 0x6C,0x94,0xE8,0x02,0xEF,0x08,0x1D,0xE8,0xB3,0xE8,0xFA,0xB3,0x72,0x36,0x4D,0x1B
    .byte 0x39,0xCB,0x08,0xE8,0x35,0xD8,0x72,0x8D,0x9A,0xCB,0x66,0x25,0xD4,0x9A,0x5E,0x02
    .byte 0x01,0xBD,0x97,0x39,0xC5,0x66,0x25,0x94,0x3A,0x25,0x61,0x6C,0xBC,0xBC,0x91,0x83
    .byte 0x2F,0x6A,0x1D,0x4A,0x04,0x5E,0x40,0x08,0xE4,0x02,0x1B,0xEF,0x8D,0x74,0x04,0xEF
    .byte 0x91,0x9A,0x04,0x1D,0x72,0x66,0x91,0x97,0xC2,0x6A,0x9A,0x20,0x63,0xD4,0x4D,0xE8
    .byte 0x61,0x25,0x08,0x5E,0x1B,0x40,0x04,0x4D,0xFA,0x1D,0x5E,0xAB,0xC2,0x3A,0x10,0xFA
    .byte 0xC6,0xCC,0x08,0x10,0x74,0x61,0xCC,0xCB,0xC5,0x6C,0xC6,0x7D,0x35,0x83,0x40,0xE4
    .byte 0x20,0xD3,0x4A,0xAB,0x7D,0x91,0x61,0x9F,0xD3,0x83,0x74,0x36,0xCC,0x83,0x1D,0x40
    .byte 0x01,0xBC,0xCC,0x63,0x94,0x36,0x2F,0x9F,0x6A,0x74,0x6A,0x66,0xBD,0xBC,0xCB,0xD8
    .byte 0x97,0x20,0xEF,0x4A,0x8D,0x25,0x83,0x39,0x80,0x94,0x35,0x33,0xD8,0xD3,0x1B,0x02
    .byte 0x9F,0x66,0x40,0xAB,0x4D,0xAB,0xE4,0x10,0x10,0x4A,0x02,0x4A,0x80,0xC5,0xE4,0xB3
    .byte 0xBD,0xBD,0xC6,0xD4,0x80,0x9F,0x8D,0x80,0xC2,0x61,0x74,0xC5,0xBD,0x01,0x7D,0xD3
    .byte 0x33,0x7D,0xEF,0xB3,0xC6,0x97,0x6C,0x2F,0xD4,0x39,0xC5,0x3A,0x63,0x91,0x04,0xE4

AffFunTable:	
    .byte 0x63,0x7C,0x5D,0x42,0x1F,0x00,0x21,0x3E,0x9B,0x84,0xA5,0xBA,0xE7,0xF8,0xD9,0xC6
    .byte 0x92,0x8D,0xAC,0xB3,0xEE,0xF1,0xD0,0xCF,0x6A,0x75,0x54,0x4B,0x16,0x09,0x28,0x37
    .byte 0x80,0x9F,0xBE,0xA1,0xFC,0xE3,0xC2,0xDD,0x78,0x67,0x46,0x59,0x04,0x1B,0x3A,0x25
    .byte 0x71,0x6E,0x4F,0x50,0x0D,0x12,0x33,0x2C,0x89,0x96,0xB7,0xA8,0xF5,0xEA,0xCB,0xD4
    .byte 0xA4,0xBB,0x9A,0x85,0xD8,0xC7,0xE6,0xF9,0x5C,0x43,0x62,0x7D,0x20,0x3F,0x1E,0x01
    .byte 0x55,0x4A,0x6B,0x74,0x29,0x36,0x17,0x08,0xAD,0xB2,0x93,0x8C,0xD1,0xCE,0xEF,0xF0
    .byte 0x47,0x58,0x79,0x66,0x3B,0x24,0x05,0x1A,0xBF,0xA0,0x81,0x9E,0xC3,0xDC,0xFD,0xE2
    .byte 0xB6,0xA9,0x88,0x97,0xCA,0xD5,0xF4,0xEB,0x4E,0x51,0x70,0x6F,0x32,0x2D,0x0C,0x13
    .byte 0xEC,0xF3,0xD2,0xCD,0x90,0x8F,0xAE,0xB1,0x14,0x0B,0x2A,0x35,0x68,0x77,0x56,0x49
    .byte 0x1D,0x02,0x23,0x3C,0x61,0x7E,0x5F,0x40,0xE5,0xFA,0xDB,0xC4,0x99,0x86,0xA7,0xB8
    .byte 0x0F,0x10,0x31,0x2E,0x73,0x6C,0x4D,0x52,0xF7,0xE8,0xC9,0xD6,0x8B,0x94,0xB5,0xAA
    .byte 0xFE,0xE1,0xC0,0xDF,0x82,0x9D,0xBC,0xA3,0x06,0x19,0x38,0x27,0x7A,0x65,0x44,0x5B
    .byte 0x2B,0x34,0x15,0x0A,0x57,0x48,0x69,0x76,0xD3,0xCC,0xED,0xF2,0xAF,0xB0,0x91,0x8E
    .byte 0xDA,0xC5,0xE4,0xFB,0xA6,0xB9,0x98,0x87,0x22,0x3D,0x1C,0x03,0x5E,0x41,0x60,0x7F
    .byte 0xC8,0xD7,0xF6,0xE9,0xB4,0xAB,0x8A,0x95,0x30,0x2F,0x0E,0x11,0x4C,0x53,0x72,0x6D
    .byte 0x39,0x26,0x07,0x18,0x45,0x5A,0x7B,0x64,0xC1,0xDE,0xFF,0xE0,0xBD,0xA2,0x83,0x9C
